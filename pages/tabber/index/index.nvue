<template>
	<view>
		<!-- 导航栏 -->
		<free-nav-bar title="JChat" :noreadnum="totalNoreadnum"></free-nav-bar>
		<view  v-if="!chat || !chat.isOnline" @click="chat.reconnectConfirm()" class="border bg-light-danger p-3 left-0 right-0 flex align-center justify-start" >
			<view class="mr-3 ml-2 bg-danger flex rounded-circle justify-center align-center" style="height: 40rpx; width: 40rpx;">
				<text class="text-white font font-weight-bold">!</text>
			</view>
			
			<text class="text-muted font">当前网络不可用，点击重新连接</text>
		</view>
		<!-- 置顶列表 -->
		<block v-for="(item,index) in list" :key="index">
			<free-media-list v-if="item.istop" @long='long' :item="item" :index="index"></free-media-list>
		</block>
		<!-- 非置顶	列表 -->
		<block v-for="(item,index) in list" :key="index">
			<free-media-list v-if="!item.istop" @long='long' :item="item" :index="index"></free-media-list>
		</block>

		<!-- 弹出层 -->
		<free-popup ref="extend" :bodyWidth="240" :bodyHeight="getMenusHeight">
			<view class="flex flex-column" style="width:240rpx;" :style="getMenusStyle">
				<view @click="clickEvent(item.event)" v-for="(item,index) in menus" :key="index"
					class="flex-1 flex align-center"  hover-stay-time='50'  hover-start-time='0' hover-class="bg-hover-light">
					<text class="font-md  pl-3">{{item.name}}</text>
				</view>

			</view>
		</free-popup>
	</view>
</template>

<script>
	import {
		mapState
	} from "vuex"
	import auth from "@/common/mixin/auth.js"
	import freeNavBar from "@/components/free-ui/free-nav-bar.vue"
	import freeMediaList from "@/components/free-ui/free-media-list.vue"
	import freePopup from "@/components/free-ui/free-popup.vue"
	export default {
		mixins: [auth],
		components: {
			freeNavBar,
			freeMediaList,
			freePopup
		},

		data() {
			return {
				propIndex: -1,
				menus: [{
						name: '标记已读',
						event: 'setNoreadnum'
					},
					{
						name: '置顶该聊天',
						event: 'setTop'
					},
					{
						name: '删除该聊天',
						event: 'delChat'
					}

				],
				
			}
		},
		computed: {
			...mapState({
				list: state => state.user.chatList,
				totalNoreadnum:state=>state.user.totalNoreadnum,
				chat:state=>state.user.chat
			}),
			// 动态获取菜单高度
			getMenusHeight() {
				let H = 100
				return this.menus.length * H
			},
			// 获取菜单样式
			getMenusStyle() {
				return `height:${this.getMenusHeight}rpx`
			}
		},
		methods: {
			long({
				x,
				y,
				index
			}) {

				this.propIndex = index
				let item = this.list[this.propIndex]
				this.menus[0].name = item.noreadnum ? '标记已读' : '标记未读'
				this.menus[1].name = item.istop ? '取消置顶' : '置顶该聊天'
				this.$refs.extend.show(x, y)
			},

			// 分发菜单事件
			clickEvent(event) {
				switch (event) {
					case "setNoreadnum":
						this.setNoreadnum()
						break
					case "setTop":
						this.setTop(event)
						break
					case "delChat":
						this.delChat()
						break
				}
				this.$refs.extend.hide()
			},
			delChat() {
				// 静态
				// this.list.splice(this.propIndex, 1)
				// 动态
				let item =	this.list[this.propIndex]
				this.chat.removeChatItem(item.id,item.chat_type)
			},
			setTop() {
				let item = this.list[this.propIndex]
				
				
				this.menus[1].name = item.istop ? '取消置顶' : '置顶该聊天'
				item.istop = !item.istop			
				this.chat.updateChatItem({
					id: item.id,
					chat_type:item.chat_type,
				}, item)

			},
			setNoreadnum() {
				let item = this.list[this.propIndex]
				if(item.noreadnum){
					item.noreadnumAll=[]
				}
				this.menus[0].name = item.noreadnum ? '标记已读' : '标记未读'
				item.noreadnum = item.noreadnum ? 0 : 1
				let key = `chatlist_${item.id}`
				this.chat.updateChatItem({
					id: item.id,
					chat_type:item.chat_type,
				}, item)
				this.chat.updateBadge(this.list)
			
			},
			updateChatItem(e, k) {
				// console.log(this.detail);
				this.detail[k] = e.detail.value
			
				this.chat.updateChatItem({
					id: this.detail.id,
					chat_type: this.detail.chat_type,
				}, this.detail)
			},
		}
	}
</script>

<style>

</style>
